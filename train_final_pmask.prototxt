name: "VGG_ILSVRC_16_layers"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  top: 'gt_mask'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 2"
  }
}

layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}

#========= RPN ============

layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5_3"
  top: "rpn/output"
  param { lr_mult: 0
		decay_mult: 0 }
  param { lr_mult: 0
		decay_mult: 0  }
  convolution_param {
    num_output: 512
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}

layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param { lr_mult: 0
		decay_mult: 0  }
  param { lr_mult: 0
		decay_mult: 0  }
  convolution_param {
    num_output: 36   # 2(bg/fg) * 12(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param { lr_mult: 0
	    decay_mult: 0  }
  param { lr_mult: 0
 	    decay_mult: 0  }
  convolution_param {
    num_output: 72   # 4 * 12(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

#layer {
#  name: 'rpn-data'
#  type: 'Python'
#  bottom: 'rpn_cls_score'
#  bottom: 'gt_boxes'
#  bottom: 'im_info'
#  bottom: 'data'
#  top: 'rpn_labels'
#  top: 'rpn_bbox_targets'
#  top: 'rpn_bbox_inside_weights'
#  top: 'rpn_bbox_outside_weights'
#  python_param {
#    module: 'rpn.anchor_target_layer'
#    layer: 'AnchorTargetLayer'
#    param_str: "'feat_stride': 16"
#  }
#}

#layer {
#  name: "rpn_loss_cls"
#  type: "SoftmaxWithLoss"
#  bottom: "rpn_cls_score_reshape"
#  bottom: "rpn_labels"
#  propagate_down: 1
#  propagate_down: 0
#  top: "rpn_cls_loss"
#  loss_weight: 0
#  loss_param {
#    ignore_label: -1
#    normalize: true
#  }
#}

#layer {
#  name: "rpn_loss_bbox"
#  type: "SmoothL1Loss"
#  bottom: "rpn_bbox_pred"
#  bottom: "rpn_bbox_targets"
#  bottom: 'rpn_bbox_inside_weights'
#  bottom: 'rpn_bbox_outside_weights'
#  top: "rpn_loss_bbox"
#  loss_weight: 0
#  smooth_l1_loss_param { sigma: 3.0 }
#}

#========= RoI Proposal ============

layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}

layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'
  top: 'rpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 36 dim: -1 dim: 0 } }
}

layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rpn_rois'
#  top: 'rpn_scores'
  propagate_down: false
  propagate_down: false
  propagate_down: false
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "'feat_stride': 16"
  }
}

#layer {
#  name: 'debug-data'
#  type: 'Python'
#  bottom: 'data'
#  bottom: 'rpn_rois'
#  bottom: 'rpn_scores'
#  python_param {
#    module: 'rpn.debug_layer'
#    layer: 'RPNDebugLayer'
#  }
#}

layer {
  name: 'roi-data'
  type: 'Python'
  bottom: 'rpn_rois'
  bottom: 'gt_boxes'
  top: 'rois'
  top: 'labels'
  top: 'bbox_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  python_param {
    module: 'rpn.proposal_target_layer'
    layer: 'ProposalTargetLayer'
    param_str: "'num_classes': 2"
  }
}



##########################
## Readonly RoI Network ##
######### Start ##########
layer {
  name: "roi_pool5_readonly"
  type: "ROIPooling"
  bottom: "conv5_3"
  bottom: "rois"
  top: "pool5_readonly"
  propagate_down: false
  propagate_down: false
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "roi_pool5"
  type: "ROIPooling"
  bottom: "conv5_3"
  bottom: "rois"
  top: "roi_pool5"
  propagate_down: true
  propagate_down: false
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}

#### mask branch 

layer {
  name: "conv6_mask"
  type: "Convolution"
  bottom: "pool5_readonly"
  top: "conv6_mask"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3

    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }

  }
}
layer {
  name: "relu6_mask"
  type: "ReLU"
  bottom: "conv6_mask"
  top: "conv6_mask"
}
layer {
  name: "conv7_mask"
  type: "Convolution"
  bottom: "conv6_mask"
  top: "conv7_mask"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3

    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }

  }
}
layer {
  name: "relu7_mask"
  type: "ReLU"
  bottom: "conv7_mask"
  top: "conv7_mask"
}

layer {
  name: "conv8_mask"
  type: "Convolution"
  bottom: "conv7_mask"
  top: "conv8_mask"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3

    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }

  }
}
layer {
  name: "relu8_mask"
  type: "ReLU"
  bottom: "conv8_mask"
  top: "conv8_mask"
}

layer 
{
  name: "eltwise_layer"
  type: "Eltwise"
  bottom: "conv6_mask"
  bottom: "conv8_mask"
  top: "eltwise"
  eltwise_param {
    operation: SUM
  }
}

layer {
  name: "conv9_mask"
  type: "Convolution"
  bottom: "eltwise"
  top: "conv9_mask"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3

    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }

  }
}
layer {
  name: "relu9_mask"
  type: "ReLU"
  bottom: "conv9_mask"
  top: "conv9_mask"
}

layer {
  name: "conv10_mask_gen"
  type: "Convolution"
  bottom: "conv9_mask"
  top: "conv10_mask_gen"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    pad: 1
    kernel_size: 3

    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
#layer {
#  name: "sigmoid_gen"
#  type: "Sigmoid"
#  bottom: "conv10_mask_gen"
#  top: "mask_gen"
#}
layer {
  name: "gen_layer"
  type: "Python"
  bottom: "conv10_mask_gen"
  bottom: "gt_mask"
  top: "mask_gen_tile"
  top: "mask_gen_thres"
  top: "mask_for_loss"
  propagate_down: false
  propagate_down: false
  python_param {
    module: "roi_data_layer.layer"
    layer: "TileLayer2"
    param_str: "{\'channels\': 512,\'permute_count\': 20,\'count_drop\': 15,\'iter_size\': 5,'maintain_before\': 1}" 
  }
}

layer{
  name:"mask_prod"
  type:"Eltwise"
  bottom:"mask_gen_tile"
  bottom:"roi_pool5"
  top:"cls_branch"
  eltwise_param {
      operation:PROD
  }
}


#### classification branch 

layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "cls_branch"
  top: "fc6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  propagate_down: true
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  propagate_down: true
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "fc7"
  top: "cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  propagate_down: true
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  top: "loss_cls"
  propagate_down: true
  propagate_down: false
  loss_weight: 1
}

layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "fc7"
  top: "bbox_pred"
  param {
    name: "bbox_pred_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "bbox_pred_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 8
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  propagate_down: true
  propagate_down: false
  propagate_down: false
  propagate_down: false
  loss_weight: 1
}
#layer {
#  name: "center_loss"
#  type: "CenterLoss"
#  bottom: "fc6"
#  bottom: "labels"
#  top: "center_loss"
#  propagate_down:true
#  propagate_down:false
#  param {
#    lr_mult: 1
#    decay_mult: 2 
#  }
#  center_loss_param {
#    num_output: 4096
#    center_filler {
#      type: "xavier"
#    }
#  }
#  loss_weight: 0.005
#}
layer {
  name: "cls_prob"
  type: "Softmax"
  bottom: "cls_score"
  top: "cls_prob"
}
layer {
  name: "SiftFaceLayer"
  type: "Python"
  bottom: "pool4"
  bottom: "bbox_pred"
  bottom: "cls_prob"
  bottom: "gt_mask"
  bottom: "rois"
  bottom: "im_info"
  top: "onlyface"
  top: "gt_mask_fg"
  propagate_down: true
  propagate_down: false
  propagate_down: false
  propagate_down: false
  propagate_down: false
  propagate_down: false 
  python_param {
    module: "roi_data_layer.layer2"
    layer: "SiftFaceLayer" 
  }
}
layer {
  name: "fc6_pmask"
  type: "Convolution"
  bottom: "onlyface"
  top: "fc6_pmask"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4096
    pad: 2
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu6_pmask"
  type: "ReLU"
  bottom: "fc6_pmask"
  top: "fc6_pmask"
}
layer {
  name: "drop6_pmask"
  type: "Dropout"
  bottom: "fc6_pmask"
  top: "fc6_pmask"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7_pmask"
  type: "Convolution"
  bottom: "fc6_pmask"
  top: "fc7_pmask"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4096
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu7_pmask"
  type: "ReLU"
  bottom: "fc7_pmask"
  top: "fc7_pmask"
}
layer {
  name: "drop7_pmask"
  type: "Dropout"
  bottom: "fc7_pmask"
  top: "fc7_pmask"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "score_fr_fg"
  type: "Convolution"
  bottom: "fc7_pmask"
  top: "score_fr_fg"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 2
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
# layer {
#   name: "upscore2_fg"
#   type: "Deconvolution"
#   bottom: "score_fr_fg"
#   top: "upscore2_fg"
#   param {
#     lr_mult: 0
#   }
#   convolution_param {
#     num_output: 33
#     bias_term: false
#     kernel_size: 4
#     stride: 2
#   }
# }
# layer {
#   name: "score_pool4_fg"
#   type: "Convolution"
#   bottom: "pool4"
#   top: "score_pool4_fg"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   param {
#     lr_mult: 2
#     decay_mult: 0
#   }
#   convolution_param {
#     num_output: 33
#     pad: 0
#     kernel_size: 1
#   }
# }
# layer {
#   name: "score_pool4_fgc"
#   type: "Crop"
#   bottom: "score_pool4_fg"
#   bottom: "upscore2_fg"
#   top: "score_pool4_fgc"
#   crop_param {
#     axis: 2
#     offset: 0
#   }
# }
# layer {
#   name: "fuse_pool4_fg"
#   type: "Eltwise"
#   bottom: "upscore2_fg"
#   bottom: "score_pool4_fgc"
#   top: "fuse_pool4_fg"
#   eltwise_param {
#     operation: SUM
#   }
# }
# layer {
#   name: "upscore_pool4_fg"
#   type: "Deconvolution"
#   bottom: "fuse_pool4_fg"
#   top: "upscore_pool4_fg"
#   param {
#     lr_mult: 0
#   }
#   convolution_param {
#     num_output: 33
#     bias_term: false
#     kernel_size: 4
#     stride: 2
#   }
# }
# layer {
#   name: "score_pool3_fg"
#   type: "Convolution"
#   bottom: "pool3"
#   top: "score_pool3_fg"
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   param {
#     lr_mult: 2
#     decay_mult: 0
#   }
#   convolution_param {
#     num_output: 33
#     pad: 0
#     kernel_size: 1
#   }
# }
# layer {
#   name: "score_pool3_fgc"
#   type: "Crop"
#   bottom: "score_pool3_fg"
#   bottom: "upscore_pool4_fg"
#   top: "score_pool3_fgc"
#   crop_param {
#     axis: 2
#     offset: 0
#   }
# }
# layer {
#   name: "fuse_pool3_fg"
#   type: "Eltwise"
#   bottom: "upscore_pool4_fg"
#   bottom: "score_pool3_fgc"
#   top: "fuse_pool3_fg"
#   eltwise_param {
#     operation: SUM
#   }
# }
layer {
  name: "upscore8_fg"
  type: "Deconvolution"
  bottom: "score_fr_fg"
  top: "upscore8_fg"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 2
    bias_term: false
    kernel_size: 32
    stride: 16
weight_filler {
type: "xavier"
}
bias_filler {
type: "constant"
value: 0
}
  }
}
#layer {
#  name: "score_fg_vis"
#  type: "Crop"
#  bottom: "upscore8_fg"
#  bottom: "data"
#  top: "score_fg_vis"
#  crop_param {
#    axis: 2
#    offset: 5
#  }
#}

layer {
  name: "score_fg"
  type: "Crop"
  bottom: "upscore8_fg"
  bottom: "data"
  top: "score_fg"
  crop_param {
    axis: 2
    offset: 12
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "score_fg"
  bottom: "gt_mask_fg"
  top: "loss"
  propagate_down: true
  propagate_down: false
  loss_param {
    ignore_label: 255
    normalize: false
  }
  loss_weight:0
}
layer{
  name:"silence1"
  type:"Silence"
  bottom:"mask_for_loss"
}
layer{
  name:"silence1"
  type:"Silence"
  bottom:"mask_gen_thres"
} 
#layer{
#  name:"silence1"
#  type:"Silence"
#  bottom:"fuse_pool3_fg"
#}
